import vsketch
import math
import random

import numpy as np
from shapely.geometry import *
from shapely.ops import *


def kmeans(pts, k):
    if len(pts) <= k:
        return [[p] for p in pts]

    pivots = [pts[i] for i in range(k)]

    old_clusters = []
    while True:
        clusters = [[] for _ in range(k)]
        for x, y in pts:
            i = min(
                range(k), key=lambda i: math.hypot(pivots[i][0] - x, pivots[i][1] - y)
            )
            clusters[i].append((x, y))

        if clusters == old_clusters:
            break

        pivots = []
        for cluster in clusters:
            cx, cy = 0, 0
            for x, y in cluster:
                cx, cy = cx + x, cy + y

            pivots.append((cx / len(cluster), cy / len(cluster)))

        old_clusters = clusters

    return old_clusters


class Prng:
    def __init__(self, bits, n=32):
        self.bits = bits
        self.ix = 0
        self.n = n

    @staticmethod
    def carrion():
        bits
        return Prng([int(b) for b in bits])

    @staticmethod
    def chemical():
        bits
        return Prng([int(b) for b in bits])

    @staticmethod
    def disconnected():
        bits
        return Prng([int(b) for b in bits])

    @staticmethod
    def random():
        bits = [random.randrange(2) for _ in range(4096 + 17)]
        return Prng(bits)

    def __call__(self, s=None, e=None):
        n = 0
        for i in range(self.n):
            n = n << 1 | self.bits[(self.ix + i) % len(self.bits)]
        self.ix = (self.ix + self.n) % len(self.bits)

        t = n / (2 ** self.n)
        if s is None and e is None:
            return t

        if s is not None and e is not None:
            return s + t * (e - s)

        return t * (s if s is not None else e)


class Day24Sketch(vsketch.SketchClass):
    points = vsketch.Param(30)
    k = vsketch.Param(10)
    triangle_prob = vsketch.Param(0.7, 0, 1)
    song = vsketch.Param(
        "random", choices=["random", "carrion", "chemical", "disconnected"]
    )

    def draw(self, vsk: vsketch.Vsketch) -> None:
        vsk.size("a4", landscape=False)
        vsk.scale("cm")

        rng = getattr(Prng, self.song)()

        pts = [(rng(16), rng(28)) for _ in range(self.points)]

        clusters = kmeans(pts, self.k)

        for cluster in clusters:
            vsk.geometry(MultiPoint(cluster).convex_hull)

            for t in triangulate(MultiPoint(cluster)):
                if rng() < self.triangle_prob:
                    continue

                vsk.geometry(t)

                i = int(rng(3))
                sx, sy = t.boundary.coords[i]

                x1, y1 = t.boundary.coords[(i + 1) % 3]
                x2, y2 = t.boundary.coords[(i + 2) % 3]

                divs = int(rng(5, 30))
                for d in range(divs):
                    k = d / divs
                    a = sx + k * (x1 - sx), sy + k * (y1 - sy)
                    b = sx + k * (x2 - sx), sy + k * (y2 - sy)
                    vsk.line(*a, *b)

    def finalize(self, vsk: vsketch.Vsketch) -> None:
        vsk.vpype("linemerge linesimplify reloop linesort")


if __name__ == "__main__":
    Day24Sketch.display()
